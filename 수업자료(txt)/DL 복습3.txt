### CNN(합성곱 신경망 / 컨볼루션 신경망)

#### CNN의 도입배경
  > MLP(다층 퍼셉트론)는 이미지를 처리할 때 픽셀 단위로 하나하나 처리하는 특징을 가지고 있음
  > 1차원 데이터를 입력받는 특징을 가지고 있음
  > MLP를 학습시킬 때 1차원으로 변형시킨 데이터의 픽셀 위치정보가 특성이 되어 학습되는 것을 볼 수 있음
  > 문제점 발생! -> 위치정보가 조금이라도 잘못되면 정확한 예측 불가
  > 위치 정보를 배제하고(픽셀의) 이미지에서 추출되는 특성으로만 이미지를 학습, 예측해서 사용하겠다 == CNN

#### CNN의 구조
  - 특성 추출부 + 분류기
  -> 특성 추출부 : 이미지에서 중요한 특성을 뽑아내는 것만 하겠다.
  -> 분류기 : 중요한 특성을 가지고 답을 골라내겠다.

#### 특성 추출부의 구조
  > Conv layer : 돋보기 - 이미지에서 중요한 특성을 잘보이게 만들어줌
  > Pooling layer : 중요한 정보만 남기고 나머지는 제외함

#### CNN에서 어떻게 특징을 추출할까?
  > 입력된 이미지에서 특징을 추출할 수 있는 필터의 개념을 도입
  -> 이때 필터 내부는 가중치를 채워준다
  > 이미지에 필터를 적용시킬 때 특정 범위에 한정해서 효과적으로 특징을 추출하는 방식 사용 -> 합성 곱 연산 사용

#### Padding
  - 이미지 테두리(외곽)에 0이라는 숫자를 둘러주는 방법
  - 이미지는 CNN 특성 추출부를 통과할 때 마다 사이즈가 줄어듬
  - 종국에는 필터 사이즈보다 이미지 사이즈가 작아지는 상황 발생
  - 이미지 크기를 일정 수준으로 유지하기 위해 0이라는 테두리를 둘러줌
  - 꼭지점에 위치한 데이터를 놓치지 않게 하기 위해서도 사용
  - 테두리로 0을 둘러주는 이유 : 합성곱 연산에서 임의로 둘러준 데이터가 분석에 악영향을 주지 않도록 사용하지 않겠다 -> 0 리턴
  - 패딩은 선택사항 / 사용 여부를 정할 수 있음
  > same : 패딩을 사용하겠다
  > valid : 패딩을 사용하지 않겠다

#### 축소 샘플링
  - 이미지에서 특성을 추출한 다음 모든 정보를 다음층으로 넘기지 않는다
  > 정말 중요하다고 생각하는 특성만 다음 층으로 넘김
    1) 스트라이드
      - 합성곱 연산에 필터를 적용시켜 특성을 추출할 때 1칸씩 이동시킴
      > 특성 추출은 칸이 이동하는 횟수와 동일하다
      > 이미지의 크기를 효과적으로 줄이기 위해 2픽셀 / 3픽셀 단위로 움직이는 방법
      > 2픽셀 : 이미지 크기 1/4로 축소 / 3픽셀 : 이미지 크기 1/9로 축소
      > 이미지가 크고 픽셀 수가 많을 때 / 중요한 특성이 얼마 없을 때 사용
      > 가장 많이 사용하는 스트라이드는 (1, 1) 많이 사용
      > 주의점 : 스트라이드를 지정할 때 가로 / 세로 이동값을 동일하게 부여

    2) *** Pooling ***
      - CNN에서 특성을 추출해서 다음 층으로 넘길 때 모든 특성을 다음층올 넘기지 않겠다
      - 일정 범위에서 가장 큰 값 / 평균값을 구해서 다음층으로 넘긴다
      - Max pooling : 설정된 지역 내에서 가장 큰 값을 가져오는 방법
      > 가장 중요한 정보를 가져오겠다
      - Average pooling : 설정된 지역내의 평균값을 가져오는 방법

* 전체적으로 신경써야하는 주의점
  - Conv2D / Conv3D / Maxpooling2D / Maxpooling3D
  > 이미지를 2차원 내지 3차원으로 다음 층에 넘김
  - 분류기로 사용하는 MLP는 몇 차원 데이터만 받는다? -> 1차원만 받음
  > 분류기가 받을 수 없는 데이터의 형태를 받으면 에러 발생
  > 이 상황을 방지하기 위해 데이터를 1차원으로 펴주는 Faltten층 사용
  